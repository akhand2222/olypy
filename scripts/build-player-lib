#!/usr/bin/env python

'''
Given a set of turn reports, build a game database.
'''

import sys
import os
import re

import olypy.turnparser as turnparser
import olypy.oio as oio
import olypy.dbck as dbck


def looks_like_a_turn(text):
    if 'The next NP will be received at the end of turn' not in text:
        return False
    if 'The next five nobles formed will be:' not in text:
        return False
    if 'Player-contributed press' in text and 'Rumors' in text and 'Questions, comments, to play' in text:
        return False
    return True


filelist = sys.argv[1:]
turn_files = {}

os.makedirs('lib/fact', exist_ok=False)
os.makedirs('lib/spool', exist_ok=False)
os.makedirs('lib/orders', exist_ok=False)

for f in filelist:
    m = re.search('(\d{2,})', f)
    if not m:
        continue
    t = m.groups(1)[0]
    tf = turn_files.get(t, [])
    tf.append(f)
    turn_files[t] = tf

sorted_turns = sorted(list(turn_files.keys()))
last_turn = sorted_turns[-1]
print('Last turn is:', last_turn)
data = {}

turnparser.create_garrison_player(data)
turnparser.create_independent_player(data)

for t in sorted_turns:
    if t == last_turn:
        everything = True
    else:
        everything = False

    for f in turn_files[t]:
        contents = ''
        print('\nprocessing', f, '\n')
        with open(os.path.expanduser(f), 'r') as fd:
            for line in fd:
                contents += line.expandtabs()
        if looks_like_a_turn(contents):
            turnparser.parse_turn(contents, data, everything=everything)
        else:
            print('skipped {} because it did not look like a turn'.format(f))

turnparser.finish(data, last_turn)

problems = dbck.check_db(data)
print('Database check found {} problems'.format(problems))

oio.write_lib(data, 'lib')
turnparser.final_fixups('lib')

# subprocess module introduced in 3.5, so don't use it yet
tar = 'tar cjf lib.{}.tar.bz2 lib'.format(last_turn)
ret = os.system(tar)

if ret != 0:
    raise ValueError('{} exited with error value {}'.format(tar, ret))
